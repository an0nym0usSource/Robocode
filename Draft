package man;
import robocode.*;
//import robocode.util.Utils;
import java.awt.Color;

/**
 * 
 * @author
 *
 */



public class MyFirstRobot extends AdvancedRobot {
	private double enemyRobotDistance;
	private int currentNumberOfPlayers = 0;
	private int burstCont = 0;
	private int hitCont = 0;
	private int bulletMissedCont = 0;
	
		// First function called by the robot
		public void run() {
			setBodyColor(Color.green.darker());
			setGunColor(Color.black);
			setRadarColor(Color.gray);
			setBulletColor(Color.orange);
			setScanColor(Color.white);
			// Set the Radar to be independent of the Gun rotation
			setAdjustRadarForGunTurn(true);
			
			// Robot main loop
			while (true) {
				currentNumberOfPlayers = getOthers();
				setTurnRadarRight(Double.POSITIVE_INFINITY);
				execute();
			} 
		} 
		
		public void onScannedRobot(ScannedRobotEvent e){
			if(currentNumberOfPlayers == 1){
				lockTarget(e); // to shoot + 5ยบ
				if(bulletMissedCont >= 3){ 
					bulletMissedCont = 0;
					ahead(e.getDistance()/2);
				}
				else if(hitCont > 3){
					hitCont = 0;
					movePerpendicularToEnemy(e);
				}
				else{ 
					// lockTarget2 to shoot -10ยบ
					fireFunction(e);
				}
				scan();
			}
			//else if(currentNumberOfPlayers > 1 && currentNumberOfPlayers < 7){}
			else{
				if(e.getEnergy() < 10){
					lockTarget(e);
					if(bulletMissedCont >= 4){
						bulletMissedCont = 0;
						spinMove();
					}
					else fireFunction(e);
				}
				else spinMove();
			}
		}
		
		public void onWin(WinEvent e){
			int i = 5;
			while(i > 0){
				turnRight(30);
				turnLeft(30);
				i--;
			}
		}
		
		public void onHitByBullet(HitByBulletEvent e){
			hitCont++;
		}
		
		public void onBulletMissed(){
			bulletMissedCont++;
		}
		
		//public void onHitWall(HitWallEvent e){}
		
		// battlefield size
		
		private void movePerpendicularToEnemy(ScannedRobotEvent e){
			turnLeft(90 - e.getBearing());
			ahead(100);
			back(100);
		}
		
		private void spinMove(){
			setTurnRight(300);
			setMaxVelocity(5);
			ahead(300);
		}
		
		private void fireFunction(ScannedRobotEvent e){
			if(burstCont < 2){
				fire(whatBulletToFire(e));
				burstCont++;
			}
			else if(burstCont < 8){
				burstCont++;
			}
			else burstCont = 0;
		}
		
		private int whatBulletToFire(ScannedRobotEvent e){
			enemyRobotDistance = e.getDistance();
			if (enemyRobotDistance > 200 || getEnergy() < 15) return 1;
			else if (enemyRobotDistance > 50) return 2;
			else return 3;
		}
		
		private void lockTarget(ScannedRobotEvent e){
			double angleToEnemy = getHeadingRadians() + e.getBearingRadians();
			double angleRadarNeedsTurn = angleToEnemy - getRadarHeadingRadians();
			setTurnRadarRightRadians(angleRadarNeedsTurn);
			//double angleGunNeedsTurn = getGunHeading() - getRadarHeading();
			setTurnGunLeft(angleGunNeedsTurn);
		}
}
